// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package team3543.robot;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Command;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	
	Robot robot;
		
	public static final int DEFAULT_LEFT_JOYSTICK_PORT	= 0;
	public static final int DEFAULT_RIGHT_JOYSTICK_PORT	= 1;
	
	public static final int TRIGGER_BUTTON				= 1;
	public static final int THUMB_BUTTON				= 2;	
	
    public JoystickButton switchDriveMode;
    public Joystick leftJoystick;
    public Joystick rightJoystick;

    public OI(Robot robot) {
    	this.robot = robot;
    	initJoysticks(DEFAULT_LEFT_JOYSTICK_PORT, DEFAULT_RIGHT_JOYSTICK_PORT);    	
    }
    
    public void configure() {
    	// put OI configuration here.  This is called during robotInit    	
    }
    
    public OI initJoysticks(int left, int right) {
        rightJoystick = new Joystick(right);        
        leftJoystick = new Joystick(left);
        return this;
    }
    
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }

    public Joystick getRightJoystick() {
        return rightJoystick;
    }
    
    public static class Joystick extends edu.wpi.first.wpilibj.Joystick {
    	Joystick(int port) {
    		super(port);
    	}
    	
    	public JoystickButton button(int num) {
    		return new JoystickButton(this, num);
    	}
    	
    	public Activity buttonPressed(int num) {
    		return Activity.from( () -> {
				return getRawButtonPressed(num);
    		});
    	}
    	
    	public Activity buttonReleased(int num) {
    		return Activity.from(() -> {
				return getRawButtonReleased(num);
    		});
    	}
    	
    	public Activity triggerPressed() {
    		return this.buttonPressed(TRIGGER_BUTTON);
    	}
    	
    	public Activity triggerReleased() {
    		return this.buttonReleased(TRIGGER_BUTTON);
    	}
    	
    }
        
    //////////// Dashboard stuff //////////
    void addDashboardActivity(final String label, final Activity activity) {
    	SmartDashboard.putData(label, new Command() {
    		boolean done = false;
    		
    		@Override
    		public void execute() {
    			done = activity.loop();
    		}
    		
			@Override
			protected boolean isFinished() {
				return done;
			}    		
    	});
    }
}

